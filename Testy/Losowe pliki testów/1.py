import numpy as np
data=["0.07039","0.07039","0.0704","0.07041","0.07046","0.07046","0.07047","0.07048","0.0705","0.07051","0.07054","0.07058","0.07059","0.07059","0.070", "0.07066","0.07066","0.07066","0.07071","0.07072","0.07072","0.07073","0.07072","0.07069","0.07059","0.07059","0.07066","0.07064","0.07064","0.07055","0.07067","0.07067","0.07064","0.07069","0.07069","0.07063","0.07065","0.07065","0.07071","0.0707","0.07074","0.07083","0.07082","0.07079","0.07075","0.07075","0.07071","0.07065","0.07071","0.07068","0.07069","0.07072","0.07072","0.07072","0.07065","0.07065","0.07063","0.07062","0.07061","0.0706","0.07061","0.07063","0.07063","0.07064","0.07067","0.07067","0.07067","0.07067","0.07068","0.07068","0.07069","0.07076","0.07076","0.07075","0.07078","0.07081","0.07081","0.07076","0.07075","0.07075","0.07079","0.07079","0.07081","0.07081","0.07083","0.07085","0.07085","0.07085","0.07085","0.07085","0.07085","0.07086","0.07086","0.07086","0.07086","0.07086","0.07084","0.07086","0.07084","0.07082","0.07082","0.07077","0.07073","0.07073","0.0707","0.07062","0.07063","0.07063","0.07063","0.07063","0.07063","0.07063","0.07051","0.07062","0.07063","0.07062","0.07062","0.07062","0.07061","0.07062","0.07062","0.07064","0.07064","0.07072","0.07073","0.07074","0.07074","0.07082","0.07082","0.07084","0.07084","0.07084","0.07084","0.07084","0.07084","0.07084","0.07084","0.07084","0.07084","0.07084","0.07084","0.07084","0.07084","0.07083","0.07082","0.07082","0.0708","0.07078","0.07074","0.07074","0.07071","0.07064","0.07062","0.07062","0.07069","0.07069","0.07071","0.07069","0.07069","0.07069","0.0707","0.0707","0.0707","0.0707","0.0708","0.0708","0.0708","0.0708","0.07078","0.07078","0.07078","0.07078","0.07077","0.07076","0.07075","0.07075","0.07077","0.07074","0.07077","0.07078","0.07079","0.0708","0.0708","0.0708","0.0708","0.0708","0.07082","0.07082","0.07082","0.07082","0.07082","0.07082","0.07082","0.07082","0.07083"]
zakres=int(20)

def SI_sma(data, zakres):
    weights=np.ones((zakres,))/zakres
    smas=np.convolve(data, weights, 'valid')
    return np.around(smas,9)
        
def SI_ema(data, zakres):
    weights_ema = np.exp(np.linspace(-1.,0.,zakres))
    weights_ema /= weights_ema.sum()
    ema=np.convolve(data,weights_ema)[:len(data)]
    ema[:zakres]=ema[zakres]
    return np.around(ema,9)
#np.set_printoptions(suppress=True)
data=list(np.float_(data))

smas=SI_sma(data, zakres=zakres)                 
ema=SI_ema(data, zakres=zakres)
print(type(smas[-1]))
print(type(smas[-1]))
print(smas[-1])
print(ema[-1])

diffi=((smas[-1])-(ema[-1]))
print(round(diffi,6))
print(np.around(diffi,6))
print(np.round_(diffi,6))
print(diffi)
print("{:.6f}".format(diffi))
